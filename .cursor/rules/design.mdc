---
alwaysApply: true

## Design Guidelines
 
**CRITICAL**: The design system is everything. You should never write custom styles in components, you should always use the design system and customize it and the UI components (including shadcn components) to make them look beautiful with the correct variants. You never use classes like text-white, bg-white, etc. You always use the design system tokens.
 
- Maximize reusability of components.
- Leverage the index.css and tailwind.config.ts files to create a consistent design system that can be reused across the app instead of custom styles everywhere.
- Create variants in the components you'll use. Shadcn components are made to be customized!
- You review and customize the shadcn components to make them look beautiful with the correct variants.
- **CRITICAL**: USE SEMANTIC TOKENS FOR COLORS, GRADIENTS, FONTS, ETC. It's important you follow best practices. DO NOT use direct colors like text-white, text-black, bg-white, bg-black, etc. Everything must be themed via the design system defined in the index.css and tailwind.config.ts files!
- Always consider the design system when making changes.
- Pay attention to contrast, color, and typography.
- Always generate responsive designs.
- Beautiful designs are your top priority, so make sure to edit the index.css and tailwind.config.ts files as often as necessary to avoid boring designs and levarage colors and animations.
- Pay attention to dark vs light mode styles of components. You often make mistakes having white text on white background and vice versa. You should make sure to use the correct styles for each mode.
 
### Design System Best Practices
 
1. **When you need a specific beautiful effect:**
   ```tsx
   // ❌ WRONG - Hacky inline overrides
 
   // ✅ CORRECT - Define it in the design system
   // First, update index.css with your beautiful design tokens:
   --secondary: [choose appropriate hsl values];  // Adjust for perfect contrast
   --accent: [choose complementary color];        // Pick colors that match your theme
   --gradient-primary: linear-gradient(135deg, hsl(var(--primary)), hsl(var(--primary-variant)));
 
   // Then use the semantic tokens:
     // Already beautiful!
   ```
 
2. **Create Rich Design Tokens:**
   ```css
   /* index.css - Design tokens should match your project's theme! */
   :root {
      /* Color palette - choose colors that fit your project */
      --primary: [hsl values for main brand color];
      --primary-glow: [lighter version of primary];
 
      /* Gradients - create beautiful gradients using your color palette */
      --gradient-primary: linear-gradient(135deg, hsl(var(--primary)), hsl(var(--primary-glow)));
      --gradient-subtle: linear-gradient(180deg, [background-start], [background-end]);
 
      /* Shadows - use your primary color with transparency */
      --shadow-elegant: 0 10px 30px -10px hsl(var(--primary) / 0.3);
      --shadow-glow: 0 0 40px hsl(var(--primary-glow) / 0.4);
 
      /* Animations */
      --transition-smooth: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
   }
   ```
 
3. **Create Component Variants for Special Cases:**
   ```tsx
   // In button.tsx - Add variants using your design system colors
   const buttonVariants = cva(
      "...",
      {
      variants: {
         variant: {
            // Add new variants using your semantic tokens
            premium: "[new variant tailwind classes]",
            hero: "bg-white/10 text-white border border-white/20 hover:bg-white/20",
            // Keep existing ones but enhance them using your design system
         }
      }
      }
   )
   ```
 
**CRITICAL COLOR FUNCTION MATCHING:**
- ALWAYS check CSS variable format before using in color functions
- ALWAYS use HSL colors in index.css and tailwind.config.ts
- If there are rgb colors in index.css, make sure to not use them in tailwind.config.ts wrapped in hsl functions as this will create wrong colors.
- NOTE: shadcn outline variants are not transparent by default so if you use white text it will be invisible. To fix this, create button variants for all states in the design system.
 
## First Message Instructions
This is the first message of the conversation. The codebase hasn't been edited yet and the user was just asked what they wanted to build.
Since the codebase is a template, you should not assume they have set up anything that way. Here's what you need to do:
 
- Take time to think about what the user wants to build.
- Given the user request, write what it evokes and what existing beautiful designs you can draw inspiration from (unless they already mentioned a design they want to use).
- Then list what features you'll implement in this first version. It's a first version so the user will be able to iterate on it. Don't do too much, but make it look good.
- List possible colors, gradients, animations, fonts and styles you'll use if relevant. Never implement a feature to switch between light and dark mode, it's not a priority. If the user asks for a very specific design, you MUST follow it to the letter.
- When implementing:
  - Start with the design system. This is CRITICAL. All styles must be defined in the design system. You should NEVER write ad hoc styles in components. Define a beautiful design system and use it consistently.
  - Edit the `tailwind.config.ts` and `index.css` based on the design ideas or user requirements. Create custom variants for shadcn components if needed, using the design system tokens. NEVER use overrides. Make sure to not hold back on design.
  - USE SEMANTIC TOKENS FOR COLORS, GRADIENTS, FONTS, ETC. Define ambitious styles and animations in one place. Use HSL colors only in index.css.
  - Never use explicit classes like text-white, bg-white in the `className` prop of components! Define them in the design system. For example, define a hero variant for the hero buttons and make sure all colors and styles are defined in the design system.
  - Create variants in the components you'll use immediately.
  - Never Write: ``
  - Always Write: `  // Beautiful by design`
  - Images can be great assets to use in your design. You can use the imagegen tool to generate images. Great for hero images, banners, etc. You prefer generating images over using provided URLs if they don't perfectly match your design. You do not let placeholder images in your design, you generate them. You can also use the web_search tool to find images about real people or facts for example.
  - Create files for new components you'll need to implement, do not write a really long index file. Make sure that the component and file names are unique, we do not want multiple components with the same name.
  - You may be given some links to known images but if you need more specific images, you should generate them using your image generation tool.
- You should feel free to completely customize the shadcn components or simply not use them at all.
- You go above and beyond to make the user happy. The MOST IMPORTANT thing is that the app is beautiful and works. That means no build errors. Make sure to write valid Typescript and CSS code following the design system. Make sure imports are correct.
- Take your time to create a really good first impression for the project and make extra sure everything works really well. However, unless the user asks for a complete business/SaaS landing page or personal website, "less is more" often applies to how much text and how many files to add.
- Make sure to update the index page.
- WRITE FILES AS FAST AS POSSIBLE. Use search and replace tools instead of rewriting entire files (for example for the tailwind config and index.css). Don't search for the entire file content, search for the snippets you need to change. If you need to change a lot in the file, rewrite it.
- Keep the explanations very, very short!
 
This is the first interaction of the user with this project so make sure to wow them with a really, really beautiful and well coded app! Otherwise you'll feel bad. (remember: sometimes this means a lot of content, sometimes not, it depends on the user request)
 
**CRITICAL**: keep explanations short and concise when you're done!
## Design Guidelines
 
**CRITICAL**: The design system is everything. You should never write custom styles in components, you should always use the design system and customize it and the UI components (including shadcn components) to make them look beautiful with the correct variants. You never use classes like text-white, bg-white, etc. You always use the design system tokens.
 
- Maximize reusability of components.
- Leverage the index.css and tailwind.config.ts files to create a consistent design system that can be reused across the app instead of custom styles everywhere.
- Create variants in the components you'll use. Shadcn components are made to be customized!
- You review and customize the shadcn components to make them look beautiful with the correct variants.
- **CRITICAL**: USE SEMANTIC TOKENS FOR COLORS, GRADIENTS, FONTS, ETC. It's important you follow best practices. DO NOT use direct colors like text-white, text-black, bg-white, bg-black, etc. Everything must be themed via the design system defined in the index.css and tailwind.config.ts files!
- Always consider the design system when making changes.
- Pay attention to contrast, color, and typography.
- Always generate responsive designs.
- Beautiful designs are your top priority, so make sure to edit the index.css and tailwind.config.ts files as often as necessary to avoid boring designs and levarage colors and animations.
- Pay attention to dark vs light mode styles of components. You often make mistakes having white text on white background and vice versa. You should make sure to use the correct styles for each mode.
 
### Design System Best Practices
 
1. **When you need a specific beautiful effect:**
   ```tsx
   // ❌ WRONG - Hacky inline overrides
 
   // ✅ CORRECT - Define it in the design system
   // First, update index.css with your beautiful design tokens:
   --secondary: [choose appropriate hsl values];  // Adjust for perfect contrast
   --accent: [choose complementary color];        // Pick colors that match your theme
   --gradient-primary: linear-gradient(135deg, hsl(var(--primary)), hsl(var(--primary-variant)));
 
   // Then use the semantic tokens:
     // Already beautiful!
   ```
 
2. **Create Rich Design Tokens:**
   ```css
   /* index.css - Design tokens should match your project's theme! */
   :root {
      /* Color palette - choose colors that fit your project */
      --primary: [hsl values for main brand color];
      --primary-glow: [lighter version of primary];
 
      /* Gradients - create beautiful gradients using your color palette */
      --gradient-primary: linear-gradient(135deg, hsl(var(--primary)), hsl(var(--primary-glow)));
      --gradient-subtle: linear-gradient(180deg, [background-start], [background-end]);
 
      /* Shadows - use your primary color with transparency */
      --shadow-elegant: 0 10px 30px -10px hsl(var(--primary) / 0.3);
      --shadow-glow: 0 0 40px hsl(var(--primary-glow) / 0.4);
 
      /* Animations */
      --transition-smooth: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
   }
   ```
 
3. **Create Component Variants for Special Cases:**
   ```tsx
   // In button.tsx - Add variants using your design system colors
   const buttonVariants = cva(
      "...",
      {
      variants: {
         variant: {
            // Add new variants using your semantic tokens
            premium: "[new variant tailwind classes]",
            hero: "bg-white/10 text-white border border-white/20 hover:bg-white/20",
            // Keep existing ones but enhance them using your design system
         }
      }
      }
   )
   ```
 
**CRITICAL COLOR FUNCTION MATCHING:**
- ALWAYS check CSS variable format before using in color functions
- ALWAYS use HSL colors in index.css and tailwind.config.ts
- If there are rgb colors in index.css, make sure to not use them in tailwind.config.ts wrapped in hsl functions as this will create wrong colors.
- NOTE: shadcn outline variants are not transparent by default so if you use white text it will be invisible. To fix this, create button variants for all states in the design system.
 
## First Message Instructions
This is the first message of the conversation. The codebase hasn't been edited yet and the user was just asked what they wanted to build.
Since the codebase is a template, you should not assume they have set up anything that way. Here's what you need to do:
 
- Take time to think about what the user wants to build.
- Given the user request, write what it evokes and what existing beautiful designs you can draw inspiration from (unless they already mentioned a design they want to use).
- Then list what features you'll implement in this first version. It's a first version so the user will be able to iterate on it. Don't do too much, but make it look good.
- List possible colors, gradients, animations, fonts and styles you'll use if relevant. Never implement a feature to switch between light and dark mode, it's not a priority. If the user asks for a very specific design, you MUST follow it to the letter.
- When implementing:
  - Start with the design system. This is CRITICAL. All styles must be defined in the design system. You should NEVER write ad hoc styles in components. Define a beautiful design system and use it consistently.
  - Edit the `tailwind.config.ts` and `index.css` based on the design ideas or user requirements. Create custom variants for shadcn components if needed, using the design system tokens. NEVER use overrides. Make sure to not hold back on design.
  - USE SEMANTIC TOKENS FOR COLORS, GRADIENTS, FONTS, ETC. Define ambitious styles and animations in one place. Use HSL colors only in index.css.
  - Never use explicit classes like text-white, bg-white in the `className` prop of components! Define them in the design system. For example, define a hero variant for the hero buttons and make sure all colors and styles are defined in the design system.
  - Create variants in the components you'll use immediately.
  - Never Write: ``
  - Always Write: `  // Beautiful by design`
  - Images can be great assets to use in your design. You can use the imagegen tool to generate images. Great for hero images, banners, etc. You prefer generating images over using provided URLs if they don't perfectly match your design. You do not let placeholder images in your design, you generate them. You can also use the web_search tool to find images about real people or facts for example.
  - Create files for new components you'll need to implement, do not write a really long index file. Make sure that the component and file names are unique, we do not want multiple components with the same name.
  - You may be given some links to known images but if you need more specific images, you should generate them using your image generation tool.
- You should feel free to completely customize the shadcn components or simply not use them at all.
- You go above and beyond to make the user happy. The MOST IMPORTANT thing is that the app is beautiful and works. That means no build errors. Make sure to write valid Typescript and CSS code following the design system. Make sure imports are correct.
- Take your time to create a really good first impression for the project and make extra sure everything works really well. However, unless the user asks for a complete business/SaaS landing page or personal website, "less is more" often applies to how much text and how many files to add.
- Make sure to update the index page.
- WRITE FILES AS FAST AS POSSIBLE. Use search and replace tools instead of rewriting entire files (for example for the tailwind config and index.css). Don't search for the entire file content, search for the snippets you need to change. If you need to change a lot in the file, rewrite it.
- Keep the explanations very, very short!
 
This is the first interaction of the user with this project so make sure to wow them with a really, really beautiful and well coded app! Otherwise you'll feel bad. (remember: sometimes this means a lot of content, sometimes not, it depends on the user request)
 
**CRITICAL**: keep explanations short and concise when you're done!
---

---
